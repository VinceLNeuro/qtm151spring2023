-- SQLBook: Markup
# <span style="color:darkblue"> Lecture 18 - Import Tables in SQL </span>

<font size = "5">

In the previous class we ...

- Connected to an SQL server
- Introduced data manipulation basics

In this class we will

- Import data from ".csv" files
- Review Entity Relationship Diagrams (ERD)
- Merge tables

-- SQLBook: Markup
# <span style="color:darkblue"> I. Create Headers for Empty Table </span>

<font size = "5">

United States Congress dataset

<img src="figures/rdb_us_congress.png" alt="drawing" width="650"/>
-- SQLBook: Markup
<font size = 5><font color = "blue"> Check this webset if got confused about the ERD: \
https://www.lucidchart.com/pages/er-diagrams
-- SQLBook: Code
-- An entity relationship diagram presents, tables, attributes, and their
-- connection between them. This is called "Crow's foot" notation
-- because of the shape of the arrows, with three claws

-- Examples:
-- An arrow with "|" and "Crow's" says that there is a single entity
-- on the left for each one on the right.
-- SQLBook: Markup
<font size = "5">

Create table from codebook/dictionary

- **'PRIMARY KEY' & 'NOT NULL' -> QC**
- **Capital column name use "Column name"**, otherwise use 'column name'
-- SQLBook: Code
-- Active: 1678830264746@@127.0.0.1@5432@postgres
-- We start by deleting the old table
-- SQL does not allow you to create a table if one already exists
DROP TABLE IF EXISTS us_congress_members;

-- Note in SQL the codebook is also called a "dictionary"
-- The option PRIMARY KEY indicates that this is the unique identifier
CREATE TABLE us_congress_members (
        member_id    int PRIMARY KEY,  -- **Uniquely identify the members**
        full_name    varchar(30),
        last_name    varchar(30),
        member_title varchar(30),
        state        varchar(30),
        party_name   varchar(30),
        chamber      varchar(30)
);
-- SQLBook: Code
-- (i) The NOT NULL option is a special restrition saying
--     that you are not allowed to enter missing data for this column
--     SQL includes a lot of data quality checks like this
--     to maintain data integrity.
-- (ii) The maximum length of the strings is another for of quality control
-- (iii) Include any column names with upper case in double quotations "..."

DROP TABLE IF EXISTS bills_actions;

CREATE TABLE bills_actions (
        "Congress"  int NOT NULL,
        bill_number int ,
        bill_type   varchar(30),
        action      varchar(1000),
        main_action varchar(50),
        object      varchar(30),
        member_id   int
);
-- SQLBook: Markup
<font size = "5">

<span style="color:red"> Common Pitfall:</span>
Include columns with upper case letter <br>
in double quotations, e.g. "Congress"

-- SQLBook: Markup
<font size = "5">

Try it yourself!

- Create a new table for "bills_subjects" (the last entity to be bill_subjects)
<img src="figures/rdb_us_congress.png" alt="drawing" width="650"/>

-- SQLBook: Code
-- Write your own code

DROP TABLE if EXISTS bills_subjects;

CREATE TABLE bills_subjects(
    "Congress" INT NOT NULL,
    bill_number INT,
    bill_type VARCHAR(30),
    bill_subject VARCHAR(30)
);

-- SQLBook: Markup
# <span style="color:darkblue"> II. Import CSV into SQL </span>

<font size = "5">

---
<span style = "color:red"> **(Not the right one)** </span>

(a) **Connect** to your SQL server as in Lecture 17

(b) **Copy the pathname** of the ".csv" file

- Open the folder in VS-Code
- Right click on the file
- Select "Copy Path" and paste below

$\quad$ <img src="figures/get_file_path.png" alt="drawing" width="400"/>


(c) **Import row data**

For the instructor's computer this is:

<font size = "3">


```sql
COPY us_congress_members
FROM 'D:\GitHub\qtm151spring2023\Lecture 18\data\us_congress_members.csv' ```
WITH (DELIMITER ',', FORMAT csv, HEADER MATCH);
```
-- SQLBook: Code
-- Test -> Permission denied
COPY us_congress_members
FROM '/Users/vincent/Documents/GitHub/qtm151spring2023/Lecture 18/data/us_congress_members.csv'
WITH (DELIMITER ',', FORMAT csv, HEADER MATCH)
-- SQLBook: Markup
---
-- SQLBook: Markup
<span style = "color: red; font-size: 150%"> **The right method to import dataset** </span>
-- SQLBook: Markup
# <span style="color:darkblue"> Permissions Mac </span>

<font size = "5">

Sometimes you won't be able to use COPY because your SQL <br>
does not have permission to access it. <br>

To overcome these permission issues on a mac, you can copy <br>
your files to a temporary folder. Follow these steps
-- SQLBook: Markup
<font size = "5">

(1) Open the terminal

- Type "open /tmp"
- This will open a window in finder "tmp"
-- SQLBook: Markup
<font size = "5">

(2) Copy the "data" folder in Lecture 18 to "tmp"

- Do this by dragging and dropping the file <br>
in the finder window
-- SQLBook: Markup
<font size = "5">

(3) Get file pathname

- In the "tmp" folder, enter the data
- Hold the "Option" key on your keyboard
- While you do, right Click on a ".csv" file, e.g. ```"us_congress_members.csv"```
- Select the option 

``` Copy "us_congress_members.csv" as PATHNAME ```
-- SQLBook: Code
-- Import the dataset into the "us_congress_members" table created in the server previously
COPY us_congress_members
FROM '/private/tmp/SQL_import_data/us_congress_members.csv'
WITH (DELIMITER ',', FORMAT csv, HEADER MATCH)
-- SQLBook: Code
-- Take a look at the whole imported dataset
SELECT * FROM us_congress_members
-- SQLBook: Markup
Explain the arguments
-- SQLBook: Code
-- COPY: the name of the table dataset in our server
-- FROM: filepath name of the dataset

-- There are three options specified in WITH:
    --1. DELIMETER indicates values are comma separated ","
    --2. FORMAT indicates that this is a CSV
    --3. HEADER MATCH indicates that the first row contains column names and should be ignored when importing.
-- SQLBook: Markup
<font size = "5">

Interpreting Error Messages:
-- SQLBook: Code
-- NOTE 1: Sometimes HEADER MATCH will give an error if the 
-- 'CSV' file contains columns that are out of order. If this happens
--  either edit the order of "CREATE TABLE" above

-- NOTE 2: Sometimes you will get an error if the table doesn't
-- already exist. If this happens, it means that you haven't
-- run the "CREATE TABLE" above.
-- SQL doesn't allow you to import data without specifying the
-- "codebook" first. In that sense it's quite different from Python.
-- SQLBook: Markup
<font size = "5">

Try it yourself!

- Copy the table "bills_actions.csv"
- Use the following code to view the dataset

```sql
SELECT * FROM bills_actions
```
-- SQLBook: Code
-- Write your own code
-- Note in the instructor's computer this is:
-- You just have to change the FROM argument
--
COPY bills_actions
FROM '/private/tmp/SQL_import_data/bills_actions.csv'
WITH (DELIMITER ',', FORMAT csv, HEADER MATCH);
-- SQLBook: Code
-- View the dataset
SELECT * FROM bills_actions
-- SQLBook: Markup
<font size = "5">

<span style="color:red"> Common Pitfalls: </span>

- Make sure to enter the paths of the files! <br>
 This is specific to each computer
- **Make sure that you've created a table before <br>
using COPY**



-- SQLBook: Markup
# <span style="color:darkblue"> III. Merge Data </span>

<font size = "5">

<span style="color:red"> Common Pitfall: </span>
Import the data before proceeding!
-- SQLBook: Markup
<font size = "5">

Count unique rows
-- SQLBook: Code
-- COUNT(DISTINCT columnname) computes the number of unique rows
-- "AS" is the alias or name of the statistic

SELECT COUNT(DISTINCT party_name) AS num_distinct_parties,
       COUNT(*) AS num_members       
FROM us_congress_members
-- SQLBook: Markup
<font size = "5">
Display unique rows
-- SQLBook: Code
SELECT party_name       
FROM us_congress_members
GROUP BY party_name
-- SQLBook: Markup
<font size = "5">

Count members for each party
-- SQLBook: Code
SELECT party_name,       
       COUNT(*) AS num_members       
FROM us_congress_members
GROUP BY party_name;
-- SQLBook: Markup
<font size = "5">

Merge Databases
-- SQLBook: Code
-- FROM indicates the primary dataset
-- LEFT JOIN indicates the secondary dataset for merging
-- ON ... = ... is the matching column
-- We use the "." to indicate the key in each of the datasets
-- The format is
-----  ON data1.key = data2.key

SELECT * 
FROM bills_actions
LEFT JOIN us_congress_members
ON us_congress_members.member_id  = bills_actions.member_id;

-- Note: This command may take a few seconds to run. This is normal
-- In the instructor's computer this took 2 min but may take more 
-- or less in your computer
-- SQLBook: Code
SELECT * 
FROM bills_actions
LEFT JOIN us_congress_members
-- Same as the above, sequence does not matter
ON bills_actions.member_id  = us_congress_members.member_id;
-- SQLBook: Markup
<font size = "5">

Try it yourself!

- Count the unique number of members by 'chamber'
-- SQLBook: Code
-- Write your own code
SELECT chamber,
    COUNT (*) AS num_members
FROM us_congress_members
GROUP BY chamber

-- SQLBook: Markup
# <span style="color:darkblue"> IV. (Optional) Additional Resources </span>

<font size = "5">

Overview of SQL:

https://www.youtube.com/watch?v=27axs9dO7AE

Introduction to databases: <span style = "color:red"> **Great source**</span>

https://www.youtube.com/watch?v=wR0jg0eQsZA

Introduction to Entity Relationship Diagrams

https://www.youtube.com/watch?v=wR0jg0eQsZA